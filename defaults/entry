/**
 *  entry.js
 *  
 *  这是一个模板文件，需要使用 bunker 工具生成目标文件才能使用
 */

const React= require('react');
const {
  Platform,
  AsyncStorage,
  AppRegistry,
  StyleSheet,
  View,
  Text,
  Alert,
  ActivityIndicator,
  NativeEventEmitter
} = require('react-native');

const ReactMixin = require('react-mixin');
const Subscribable = require('react-native/Libraries/Components/Subscribable');
const crypto = require('crypto-js');
const camelcase = require('camelcase');
const path = require('react-native-path');

const config = {};

/*******************************************************************************
                                    模块声名

模板参数 $args: [Dependencies Preload Modules Main BUNKERID, App]
需要 node 支持模板字符串
编译该模板的方法为：
  
  var template = fs.readFileSync({path});
  var script = new Function(... $args, template).call(this, ... args);

*******************************************************************************/

/**
 *  Dependencies 需要静态加载，需要直接使用 require
 *  Modules 动态加载，只需要声明即可
 */
const ModuleDefinations = {
  Dependencies: {{Dependencies}},
  Preload: {{Preload}},
  Modules: {{Modules}},
  {{Main}}
};

/**
 *  Bunker 的实现实际上是该文件，必须通过 BunkerID 与动态模块共享实现
 *  BUNKERID 必须不与 Packager 自动生成的 moduleID 重复，
 *  如果有需要，可以修改 src/magic.js 中的值
 */
const BUNKERID = {{BunkerID}};

const App = {
  ... {{App}}
};

const projRoot = '/';
const bunkerConfig = {{bunkerConfig}}

/*******************************************************************************
                                    公共接口
*******************************************************************************/

exports.Dependencies = buildDependencies();
exports.Modules = buildModules();
exports.Preload = buildPreload();
exports.App = App;
exports.config = function (key, value, _public = false) {
  const field = _public ? exports : config;
  if (field[key] !== undefined) throw new Error(`Bunker ${_public ? 'public' : 'private'} configure for key ${key} has been configured.`);
  field[key] = value;
}

/*******************************************************************************/

exports.loadModule = loadModule;

/*******************************************************************************/

exports.createAsyncComponent = createAsyncComponent;

/**
 *  将异步加载的 Component 包装起来
 *  同一个包装器中，Component 只会被 load 一次
 */
function createAsyncComponent(cid) {
  const EventEmitter = new NativeEventEmitter.__proto__();
  const uid = `${cid}?${new Date().getTime()}`;
  var Component = undefined;

  async function loadOriginalComponent() {
    try {
      Component = Component || (await loadModule(cid));
    }catch(e){
      if (__DEV__) console.warn(e);
      var error = e;
    }
    EventEmitter.emit(uid, error, Component);
  }
  
  class AsyncComponent extends React.Component {

    static get navigationOptions () {
      return Component.navigationOptions;
    }

    state = {};
    
    componentDidMount() {
      this.loadOriginalComponent();
    }

    loadOriginalComponent() {
      this.addListenerOn(EventEmitter, uid, (error, Component)=>{
        EventEmitter.removeCurrentListener();
        this.setState({error, Component});
      });
      this.setState({Component: undefined}, loadOriginalComponent);
    }

    render() {
      const Component = this.state.Component;
      return Component ? <Component {...this.props} /> : (
        <View style={styles.placeholder}>
          <ActivityIndicator />
          {
            !this.state.error ? <Text style={styles.message}>加载中 ...</Text> :
                <Text style={styles.message}>加载失败，
                <Text style={styles.retry} onPress={this.loadOriginalComponent}>重试</Text></Text>
          }
        </View>
      );
    }
  }

  const styles = StyleSheet.create({
    placeholder: {
      ...StyleSheet.absoluteFillObject,
      justifyContent: 'center',
      alignItems: 'center'
    },
    message: {
      margin: 13,
      color: 'gray'
    },
    retry: {
      color: '#1488F5'
    }
  });

  ReactMixin(AsyncComponent.prototype, Subscribable.Mixin);

  return AsyncComponent;
}


/**
 *  公共接口加入到全局 module 中
 *  
 */
__d(function (global, require, module) {
  module.exports = exports;
}, BUNKERID);

/*******************************************************************************
                                    功能定义
*******************************************************************************/

function buildPreload() {
  return ModuleDefinations.Preload;
}

function buildDependencies() {
  return ModuleDefinations.Dependencies;
}

/**
 *  
 */
function buildModules() {
  var modules = {__proto__: ModuleDefinations.Modules};

  Object.keys(ModuleDefinations.Preload).forEach(function (key) {
    Object.defineProperty(modules, key, {
      get: async function() {
        return ModuleDefinations.Preload[key];
      }
    })
  })
  return modules;
}

async function loadModule(name) {
  
  const request = strictModuleDefination(name);

  /**
   *  首先在 Modules Dependencies 中查找
   */
  const indexes = strictQueryPath(name);

  return indexes.reduce(reduce, exports.Modules) || indexes.reduce(reduce, exports.Dependencies) || loadModuleImpl({
    request: name,
    name: crypto.MD5(name).toString(crypto.enc.Hex)
  });

  function reduce(lib, key) {
    return lib && lib[key];
  }

  function strictModuleDefination(request) {
    request = path.resolve(projRoot, bunkerConfig.Source, request);
    return path.relative(projRoot, request);
  }

  function strictQueryPath(request) {
    var srcDir = path.resolve(projRoot, bunkerConfig.Source);
    request = path.resolve(srcDir, request);
    request = path.relative(srcDir, request);

    return request.replace(/\.{2}/g, '$').split(/\//g).map(function (request) {
      return camelcase(request).replace(/^[a-z]/i, function (char) {
        return char.toUpperCase();
      })
    });
  }
}
/**
 *  
 */
async function loadModuleImpl(module) {
  if (!module.isInitialized) {
    var script = await loadModuleSource(module);
    compileModule(module, script); 
    module.isInitialized = true; 
  }

  return module.exports;
}

async function loadModuleSource(module) {
  if (typeof config.loadModuleSource !== 'function') {
    throw new Error(`Bunker's loadModuleSource must be configured before dynamic module can be used.`);
  }
  return config.loadModuleSource(module.name);
}

/**
 *  使用局部缓存，当 mainModule 释放后，所有的资源全部释放
 */
function compileModule(module, script) {
  
  const modules = Object.create(null);
  const globalObject = {__proto__: global};

  return module.exports = new Function('__d', 'require', script).call(globalObject, define, require);

  function define(
    factory: FactoryFn,
    moduleId: number,
    dependencyMap
  ) {
    if (moduleId in modules) {
      // prevent repeated calls to `global.nativeRequire` to overwrite modules
      // that are already loaded
      return;
    }

    modules[moduleId] = {
      dependencyMap,
      exports: undefined,
      factory,
      hasError: false,
      isInitialized: false,
    };
  }

  function require(moduleId) {
    if (moduleId === BUNKERID) return originalRequire(BUNKERID);

    const module = modules[moduleId];

    return module && module.isInitialized
      ? module.exports
      : loadModuleImplementation(moduleId, module);
  }

  function loadModuleImplementation(moduleId, module) {

    // We must optimistically mark module as initialized before running the
    // factory to keep any require cycles inside the factory from causing an
    // infinite require loop.
    module.isInitialized = true;
    const exports = module.exports = {};
    const {factory, dependencyMap} = module;
    try {

      const moduleObject = {exports};

      // keep args in sync with with defineModuleCode in
      // packager/src//Resolver/index.js
      // and packager/src//ModuleGraph/worker.js
      factory(globalObject, require, moduleObject, exports, dependencyMap);

      // $FlowFixMe: This is only sound because we never access `factory` again
      module.factory = undefined;
      
      return (module.exports = moduleObject.exports);

    } catch (e) {
      module.hasError = true;
      module.error = e;
      module.isInitialized = false;
      module.exports = undefined;
      throw e;
    }
  }
}
/*******************************************************************************
                                    自动加载
*******************************************************************************/

/**
 *  hook AppRegistry.runApplication, 获取启动参数
 */
AppRegistry.runApplication = (function (runApplication) {
  return function (appName, params) {
    if (App.name === appName) {
      App.params = params;
    }
    return runApplication.call(AppRegistry, appName, params);
  };
})(AppRegistry.runApplication);

AppRegistry.registerComponent(App.name, ()=> View);

/**
 *  加载主模块
 *  
 *  如果 App.params 为空，只需要等待 native 调用 runApplication 即可
 */
ModuleDefinations.Main.then(function (module) {
  AppRegistry.registerComponent(App.name, ()=> module.__esModule ? module.default : module);
  if (App.params) AppRegistry.runApplication(App.name, App.params);
});
