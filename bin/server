#!/usr/bin/env node

/**
 *  
 */

const express = require('express');
const YAML = require('js-yaml');
const program = require('commander');
const path = require('path');
const fs = require('fs');
const crypto = require('crypto');

require('colors');

const {ensureRNRoot} = require('./.utils');

const packageInfo = require('../package.json');
program
  .version(packageInfo.version)
  .description('这个命令必须在 react-native 项目根目录下运行。')
  .option('-p --port [int]', '开发模式，开发模块，不打分包', 3000)
  .option('-s --source [string]')
  .parse(process.argv);


/******************************************************************************/
const projRoot = ensureRNRoot(program.description());

// 载入 bunkerConfig
const bunkerConfig = YAML.safeLoad(fs.readFileSync(path.resolve(projRoot, '.bunker')));
const sourceDir = path.resolve(projRoot, 'dist');

/******************************************************************************/

const app = express();

/**
 *  
 */
app.get(`/:module/:platform`, function (req, res) {
  const moduleID = req.params.module;
  const platform = req.params.platform;
  const signature = req.header('content-md5');

  console.log(moduleID, platform, signature);
  /**
   *  step 1: check file exists
   */
  const moduleFile = path.resolve(sourceDir, `${moduleID}.${platform}.js`);

  try {
    fs.accessSync(moduleFile, fs.constants.F_OK);
  }catch(e){
    return res.status(404).send();
  }

  /**
   *  step 2: check signature
   */
  if (signature && signature.toLowerCase() === readSignature(moduleFile)) {
    res.status(304).send();
  }else{
    fs.readFile(moduleFile, function (error, buffer) {
      if (error) return res.status(410).send();
      res.setHeader('content-type', 'application/javascript')
      res.send(buffer);
    });
  }
});

const server = app.listen(parseInt(program.port), function () {
  const host = server.address().address;
  const port = server.address().port;

  console.log('Example app listening at http://%s:%s', host, port);
});


/******************************************************************************/

/**
 *  读取文件签名 
 */
function readSignature(file) {
  fd = fs.openSync(file, 'r');
  const buffer = new Buffer(32);

  const count = fs.readSync(fd, buffer, 0, buffer.length, 2);
  fs.closeSync(fd);

  if (count !== 32) {
    console.log(count, buffer.toString())
    throw new Error('read package signature error');
  }
  
  return buffer.toString().toLowerCase();

}