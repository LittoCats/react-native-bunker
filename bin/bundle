#!/usr/bin/env node

const program = require('commander');
const fs = require('fs');
const fse = require('fs-extra');
const path = require('path');
const YAML = require('js-yaml');
const {spawn, exec} = require('child_process');
const crypto = require('crypto');
const Module = require('module');
const EventEmitter = require('events');

require('colors');

const utils = require('./.utils');
const {ensureRNRoot, TickTock} = utils;

const packageInfo = require('../package.json');

program
  .version(packageInfo.version)
  .description('这个命令必须在 react-native 项目根目录下运行。')
  .option('-d --dev', '开发模式，开发模块，不打分包')
  .option('-o --output [string]', '输出目录，默认使用 bunker.yaml 中的定义：bunker.dist')
  .parse(process.argv);

const __DEV__ = program.dev || false;


// 检查是否是 react-native 项目根目录
const projRoot = ensureRNRoot(program.description());

// 默认的 output dir 为项目根目录下的 dist 文件夹
const outputDir = path.resolve(projRoot, program.output || './dist');

// 载入 bunkerConfig
const bunkerConfig = YAML.safeLoad(fs.readFileSync(path.resolve(projRoot, '.bunker')));

/**
 *  生成 AppEntry.js 
 *  输出文件为 ${projRoot}/node_modules/AppEntry.js
 */
buildAppEntry();
console.log('build AppEntry.js done.'.green);

if (!__DEV__) {
  let tickTock = new TickTock().begin;
  bundleModules().then(function () {
    tickTock.end;
    console.log('bundle modules done.'.green); 
  }).catch(function (error) {
    tickTock.end;
    console.error(error);
  })
}

/*******************************************************************************
                            build App Entry

生成 AppEntry.js 
输出文件为 ${projRoot}/node_modules/AppEntry.js

模板参数 $args: [Dependencies Preload Modules BUNKERID, App]
*******************************************************************************/
function buildAppEntry() {
  const template = fs.readFileSync(path.resolve(__dirname, '../defaults/entry')).toString();
  const output = path.resolve(projRoot, 'node_modules', 'AppEntry.js');

  class AppEntry {
    constructor() {
      this.Dependencies = {};
      this.Preload = {};
      this.Modules = {};
    }
    genBunkerID() {
      this.BunkerID = require('../src/magic');
      return this;
    }
    loadAppConfig() {
      this.App = `require('${path.resolve(projRoot, 'app.json')}')`;
      return this;
    }
    buildDependencies() {
      var list = [
        ... Object.keys(require(path.resolve(projRoot, 'package.json')).dependencies).filter(function (name) {
          try {
            return !!Module._resolveFilename(path.resolve(projRoot, 'node_modules', name));
          }catch(e){
            console.warn(`Dependency module ${name} in package.json is not found, ignore.`)
            return false;
          }
        }),
        ... bunkerConfig.Dependencies
      ];
      this.Dependencies = buildModules(list, function (name) {
        return `get ${buildModuleName(name)}(){ return require('${name}');}`;
      });
      return this;
    }

    buildPreload() {
      this.Preload = buildModules(bunkerConfig.Preload, function (name) {
        return `get ${buildModuleName(name)}(){return require('${path.resolve(projRoot, bunkerConfig.Source, name)}')}`;
      });
      return this;
    }

    buildModules() {
      this.Modules = buildModules([... bunkerConfig.Modules || [], bunkerConfig.Main], function (name) {
        var _name = buildModuleName(name);
        return buildModuleScript(_name, name);
      });

      return this;

      function buildModuleScript(name, request) {
        request = path.resolve(projRoot, bunkerConfig.Source, request)
        /**
         *  develop 状态下，直接返回 require 结果
         *  product 状态下，通过 moduleID 加载相应的模块
         */
        return __DEV__ 
         ? `get ${name}(){return Promise.resolve(require('${request}'));}`
         : `get ${name}(){var module = this._${name} = this._${name} || {name: '${buildModuleID(request)}'};return loadModule(module);}`;
      }
    }

    export() {
      // 模板参数 $args: [Dependencies Preload Modules BunkerID, App]
      var script = template
      .replace(/\{\{Dependencies}\}/g, this.Dependencies)
      .replace(/\{\{Preload}\}/g, this.Preload)
      .replace(/\{\{Modules}\}/g, this.Modules)
      .replace(/\{\{BunkerID}\}/g, this.BunkerID)
      .replace(/\{\{App}\}/g, this.App);

      fs.writeFileSync(output, script);
    }
  }

  function buildModules(list, loadModule) {
    var modules = {};
    var srcDir = path.resolve(projRoot, bunkerConfig.Source);
    for (var item of list) {
      /**
       *  所有模块的路径都应转换为相对路径
       */
      item = path.resolve(srcDir, item);
      item = path.relative(srcDir, item);
      buildModule(modules, item.split(/\/+/g), loadModule(item));
    }

    return pretty(`{${toSource(modules)}}`);

    function toSource(map, indent = 0) {
      return Object.keys(map).map(function (key) {
        var value = map[key];

        if (typeof value === 'string') {
          return value;
        }else{
          return `get ${key}(){return {${toSource(value, indent+1)}}}`
        }
      }).join(',');
    }

    function pretty(str) {
      var indent = '  ';
      return str.replace(/(\{)|(\}[,;]*)|([^{}]+)/g, function (str) {
        if (str === '{') {
          indent += '  ';
          return `${str}\n`;
        }

        if (str[0] === '}') {
          indent = indent.slice(0, -2);
          return `\n${indent}${str}\n`;
        }
        return `${indent}${str}`;;
      }).replace(/\n[\s]*\n/g, '\n').replace(/[\s]+$/, '');
    }
  }

  function buildModule(modules, paths, module) {
    for (var path of paths.slice(0, -1)) {
      if (path === '..') path = '$';
      path = utils.camelcase(path);
      modules = modules[path] = modules[path] || {};
    }

    path = utils.camelcase(paths.pop());

    modules[path] = module;
  }

  function buildModuleName(name) {
    name = name.replace(/^\.*\/*/, '').split(/\/+/g).pop();
    name = utils.camelcase(name);
    return name;
  }

  new AppEntry()
  .genBunkerID()
  .loadAppConfig()
  .buildDependencies()
  .buildPreload()
  .buildModules()
  .export();
}

/*******************************************************************************
                            bundle Modules

需要指定输出目录
*******************************************************************************/

function bundleModules() {
  var srcDir = path.resolve(projRoot, bunkerConfig.Source)

  // 新建输出目录
  fse.mkdirpSync(outputDir);

  var tasks = [
    ... bunkerConfig.Modules || [],
    bunkerConfig.Main
  ].map(function (item) {
    return path.resolve(srcDir, item)
  }).map(function (item) {
    return bundleModule(item, buildModuleID(item));
  });
  
  return Promise.all(tasks);

  function bundleModule(request, id) {
    request = Module._resolveFilename(request);
    return Promise.all(['ios', 'android'].map(function (platform) {
      return bundleModuleImpl(request, id, platform);
    }));
  }

  function bundleModuleImpl(request, id, platform) {
    var output = path.resolve(outputDir, `${id}.${platform}.js`);
    var assets = path.resolve(outputDir, `${id}.${platform}`);
    fse.mkdirpSync(assets);

    return new Promise(function (resolve, reject) {
      exec(`
cd ${projRoot}
react-native bundle --platform ${platform} --dev false --entry-file '${request}' --bundle-output ${output} --assets-dest ${assets}
        `, function (error, stdout, stderr) {
        if (error) return reject(error);
        if (stderr) return reject(new Error(stderr));
        // 读取缓存
        console.log(`build ${request} done.`);
        const script = fs.readFileSync(output).toString();
        const source = compileModuleScript(script);
        fs.writeFileSync(output, `/*${crypto.createHash('MD5').update(source).digest('hex')}*/\n${source}`);

        fse.removeSync(output+'.meta');
        fse.removeSync(assets)

        resolve();
      });
    });
  }

  function compileModuleScript(script) {
    const modules = [];
    const mainid = [];

    new Function('__d', 'require', script).call({}, __d, require);

    return modules.map(function ([factory, id]) {
      return `__d(${factory.toString()}, ${id});`
    }).concat(mainid.map(function (id, index) {
      if (index+1 === mainid.length) {
        return `return require(${id});`
      }
      return `require(${id});`;
    })).join('\n');

    
    function __d(factory, id) {
      modules.push([factory, id]);
    }

    function require(id) {
      mainid.push(id)
    }
  }
}

/*******************************************************************************
                            utils

需要指定输出目录
*******************************************************************************/
function buildModuleID(absolute) {
  var relative = path.relative(projRoot, absolute);
  var id = crypto.createHash('MD5').update(relative).digest('hex');
  return id;
}